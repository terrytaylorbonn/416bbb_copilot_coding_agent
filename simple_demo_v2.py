# simple_demo_v2.py
#!/usr/bin/env python3
"""
Simple GitHub Demo v2 - REAL Actions Only

This script does TWO real things:
1. Creates a REAL GitHub issue
2. Creates REAL files and commits them to GitHub

No simulations, just real actions.
"""

import requests
import json
import os
import subprocess
import tempfile
from datetime import datetime
from pathlib import Path


def create_github_issue(repo_owner, repo_name, github_token, title, description):
    """Create a real GitHub issue using the GitHub API."""
    
    url = f"https://api.github.com/repos/{repo_owner}/{repo_name}/issues"
    
    headers = {
        "Authorization": f"token {github_token}",
        "Accept": "application/vnd.github.v3+json",
        "Content-Type": "application/json"
    }
    
    issue_data = {
        "title": title,
        "body": description,
        "labels": ["enhancement", "copilot-test"]
    }
    
    print(f"🚀 Creating real GitHub issue...")
    print(f"📁 Repository: {repo_owner}/{repo_name}")
    print(f"📝 Title: {title}")
    
    try:
        response = requests.post(url, headers=headers, json=issue_data)
        
        if response.status_code == 201:
            issue = response.json()
            print(f"✅ SUCCESS! Issue #{issue['number']} created!")
            print(f"🔗 URL: {issue['html_url']}")
            return issue
        else:
            print(f"❌ Failed to create issue: {response.status_code}")
            print(f"Response: {response.text}")
            return None
            
    except Exception as e:
        print(f"❌ Error creating issue: {e}")
        return None


def create_real_files_and_commit(repo_owner, repo_name, github_token, issue_number):
    """Clone repo, create real files, and commit them."""
    
    repo_url = f"https://{github_token}@github.com/{repo_owner}/{repo_name}.git"
    temp_dir = Path(tempfile.mkdtemp())
    repo_path = temp_dir / repo_name
    
    print(f"\n🔄 Step 2: Creating real files and commits...")
    
    try:
        # Clone the repository
        print(f"📥 Cloning repository to {repo_path}...")
        result = subprocess.run(
            ["git", "clone", repo_url, str(repo_path)],
            capture_output=True,
            text=True,
            check=True
        )
        print("✅ Repository cloned successfully!")
        
        # Change to repo directory
        original_cwd = os.getcwd()
        os.chdir(repo_path)
        
        # Create branch
        branch_name = f"copilot-demo-{datetime.now().strftime('%Y%m%d-%H%M%S')}"
        subprocess.run(["git", "checkout", "-b", branch_name], check=True, capture_output=True)
        print(f"✅ Created branch: {branch_name}")
        
        # Create README.md file
        readme_content = f"""# 416bbb Copilot Coding Agent Test

## 🤖 About This Repository

This repository demonstrates **REAL** GitHub Copilot agent actions (no simulations).

### What happened:
1. ✅ **Issue #{issue_number}** was created automatically
2. ✅ **This README** was created by the script
3. ✅ **Real git commits** were made
4. ✅ **Real files** were added to the repository

### Created by Script
- 📅 **Date**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
- 🤖 **Script**: simple_demo_v2.py
- 🌿 **Branch**: {branch_name}

### Features Demonstrated
- ✅ GitHub API integration
- ✅ Real file creation
- ✅ Git operations (clone, branch, commit, push)
- ✅ Issue tracking integration

---
*This file was automatically generated by a real Copilot agent demo.*
"""
        
        with open("README.md", "w", encoding="utf-8") as f:
            f.write(readme_content)
        print("✅ Created README.md")
        
        # Create example.py file
        example_content = f'''#!/usr/bin/env python3
"""
Example Script - Created by Copilot Agent Demo

This file demonstrates real file creation by a Copilot agent.
"""

from datetime import datetime

def main():
    """Example function created by Copilot agent."""
    print("🤖 Hello from Copilot Agent!")
    print(f"📅 Created on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"📝 Issue that triggered this: #{issue_number}")
    print("✅ This is a REAL file, not a simulation!")

if __name__ == "__main__":
    main()
'''
        
        with open("example.py", "w", encoding="utf-8") as f:
            f.write(example_content)
        print("✅ Created example.py")
        
        # Add files to git
        subprocess.run(["git", "add", "."], check=True, capture_output=True)
        print("✅ Added files to git")
        
        # Commit files
        commit_message = f"🤖 Add files for issue #{issue_number} - Copilot agent demo"
        subprocess.run(["git", "commit", "-m", commit_message], check=True, capture_output=True)
        print("✅ Created git commit")
        
        # Push to GitHub
        subprocess.run(["git", "push", "-u", "origin", branch_name], check=True, capture_output=True)
        print("✅ Pushed branch to GitHub")
        
        print(f"\n🎉 Files created and committed successfully!")
        print(f"🌿 Branch: {branch_name}")
        print(f"🔗 Check your repository: https://github.com/{repo_owner}/{repo_name}")
        print(f"📁 View branch: https://github.com/{repo_owner}/{repo_name}/tree/{branch_name}")
        
        return branch_name
        
    except subprocess.CalledProcessError as e:
        print(f"❌ Git command failed: {e}")
        return None
    except Exception as e:
        print(f"❌ Error creating files: {e}")
        return None
    finally:
        os.chdir(original_cwd)


def main():
    """Main function - creates issue and real files."""
    
    # Configuration
    repo_owner = "terrytaylorbonn"
    repo_name = "416bbb_copilot_coding_agent"
    
    # Get GitHub token
    github_token = os.getenv('GITHUB_TOKEN')
    
    if not github_token:
        print("❌ Error: GitHub token not found!")
        print("Run: python simple_demo_v2.py YOUR_TOKEN_HERE")
        return 1
    
    print("🎯 Simple GitHub Demo v2 - Real Actions Only")
    print("="*60)
    
    # Step 1: Create issue
    title = f"Demo v2 - Files created on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
    description = """## 🤖 Demo v2 - Real File Creation

This issue was created by simple_demo_v2.py which will:

1. ✅ Create this GitHub issue
2. ✅ Create real files (README.md, example.py)
3. ✅ Make real git commits
4. ✅ Push real branch to GitHub

### Files to be created:
- `README.md` - Project documentation
- `example.py` - Example Python script

### Expected result:
- New branch with real files
- Real commits in git history
- Files visible on GitHub

---
*This is a REAL demo, not a simulation.*
"""
    
    issue = create_github_issue(repo_owner, repo_name, github_token, title, description)
    
    if not issue:
        print("❌ Failed to create issue. Stopping.")
        return 1
    
    # Step 2: Create real files
    branch_name = create_real_files_and_commit(repo_owner, repo_name, github_token, issue['number'])
    
    if branch_name:
        print(f"\n🎉 Demo v2 completed successfully!")
        print(f"✅ Issue #{issue['number']}: {issue['html_url']}")
        print(f"✅ Branch created: {branch_name}")
        print(f"📋 Next: Check your repository for the new files!")
    else:
        print("\n❌ Demo v2 failed during file creation!")
        return 1
    
    return 0


if __name__ == "__main__":
    import sys
    
    # Allow token to be passed as command line argument
    if len(sys.argv) > 1:
        os.environ['GITHUB_TOKEN'] = sys.argv[1]
    
    exit(main())
