# simple_demo_v3.py
#!/usr/bin/env python3
"""
Simple GitHub Demo v3 - REAL Actions Only

This script does THREE real things:
1. Creates a REAL GitHub issue
2. Creates REAL files and commits them to GitHub
3. Creates a REAL pull request

No simulations, just real actions.
"""

import requests
import json
import os
import subprocess
import tempfile
from datetime import datetime
from pathlib import Path


def load_env_file():
    """Load environment variables from .env file if it exists."""
    env_file = Path(".env")
    if env_file.exists():
        with open(env_file, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    os.environ[key.strip()] = value.strip()


def create_github_issue(repo_owner, repo_name, github_token, title, description):
    """Create a real GitHub issue using the GitHub API."""
    
    url = f"https://api.github.com/repos/{repo_owner}/{repo_name}/issues"
    
    headers = {
        "Authorization": f"token {github_token}",
        "Accept": "application/vnd.github.v3+json",
        "Content-Type": "application/json"
    }
    
    issue_data = {
        "title": title,
        "body": description,
        "labels": ["enhancement", "copilot-test"]
    }
    
    print(f"🚀 Creating real GitHub issue...")
    print(f"📁 Repository: {repo_owner}/{repo_name}")
    print(f"📝 Title: {title}")
    
    try:
        response = requests.post(url, headers=headers, json=issue_data)
        
        if response.status_code == 201:
            issue = response.json()
            print(f"✅ SUCCESS! Issue #{issue['number']} created!")
            print(f"🔗 URL: {issue['html_url']}")
            return issue
        else:
            print(f"❌ Failed to create issue: {response.status_code}")
            print(f"Response: {response.text}")
            return None
            
    except Exception as e:
        print(f"❌ Error creating issue: {e}")
        return None


def create_real_files_and_commit(repo_owner, repo_name, github_token, issue_number):
    """Clone repo, create real files, and commit them."""
    
    repo_url = f"https://{github_token}@github.com/{repo_owner}/{repo_name}.git"
    temp_dir = Path(tempfile.mkdtemp())
    repo_path = temp_dir / repo_name
    
    print(f"\n🔄 Step 2: Creating real files and commits...")
    
    try:
        # Clone the repository
        print(f"📥 Cloning repository to {repo_path}...")
        result = subprocess.run(
            ["git", "clone", repo_url, str(repo_path)],
            capture_output=True,
            text=True,
            check=True
        )
        print("✅ Repository cloned successfully!")
        
        # Change to repo directory
        original_cwd = os.getcwd()
        os.chdir(repo_path)
        
        # Create branch
        branch_name = f"copilot-demo-{datetime.now().strftime('%Y%m%d-%H%M%S')}"
        subprocess.run(["git", "checkout", "-b", branch_name], check=True, capture_output=True)
        print(f"✅ Created branch: {branch_name}")
        
        # Create README.md file
        readme_content = f"""# 416bbb Copilot Coding Agent Test

## 🤖 About This Repository

This repository demonstrates **REAL** GitHub Copilot agent actions (no simulations).

### What happened:
1. ✅ **Issue #{issue_number}** was created automatically
2. ✅ **This README** was created by the script
3. ✅ **Real git commits** were made
4. ✅ **Real files** were added to the repository
5. ✅ **Pull request** will be created automatically

### Created by Script
- 📅 **Date**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
- 🤖 **Script**: simple_demo_v3.py
- 🌿 **Branch**: {branch_name}

### Features Demonstrated
- ✅ GitHub API integration
- ✅ Real file creation
- ✅ Git operations (clone, branch, commit, push)
- ✅ Issue tracking integration
- ✅ Pull request creation

### Files Created
- `README.md` - This documentation
- `example.py` - Example Python script
- `demo_config.json` - Configuration file

---
*This file was automatically generated by a real Copilot agent demo.*
"""
        
        with open("README.md", "w", encoding="utf-8") as f:
            f.write(readme_content)
        print("✅ Created README.md")
        
        # Create example.py file
        example_content = f'''#!/usr/bin/env python3
"""
Example Script - Created by Copilot Agent Demo

This file demonstrates real file creation by a Copilot agent.
"""

from datetime import datetime
import json

def main():
    """Example function created by Copilot agent."""
    print("🤖 Hello from Copilot Agent!")
    print(f"📅 Created on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"📝 Issue that triggered this: #{issue_number}")
    print("✅ This is a REAL file, not a simulation!")
    print("🔄 This demo will also create a REAL pull request!")
    
    # Load demo config
    try:
        with open("demo_config.json", "r") as f:
            config = json.load(f)
            print(f"📋 Demo type: {{config['demo_type']}}")
            print(f"🎯 Purpose: {{config['purpose']}}")
    except FileNotFoundError:
        print("⚠️ demo_config.json not found")

if __name__ == "__main__":
    main()
'''
        
        with open("example.py", "w", encoding="utf-8") as f:
            f.write(example_content)
        print("✅ Created example.py")
        
        # Create demo_config.json file
        config_data = {
            "demo_type": "copilot_agent_v3",
            "purpose": "Demonstrate real GitHub API automation",
            "features": [
                "Issue creation",
                "File creation",
                "Git operations",
                "Pull request creation"
            ],
            "created_by": "simple_demo_v3.py",
            "issue_number": issue_number,
            "branch": branch_name,
            "timestamp": datetime.now().isoformat()
        }
        
        with open("demo_config.json", "w", encoding="utf-8") as f:
            json.dump(config_data, f, indent=2)
        print("✅ Created demo_config.json")
        
        # Add files to git
        subprocess.run(["git", "add", "."], check=True, capture_output=True)
        print("✅ Added files to git")
        
        # Commit files
        commit_message = f"🤖 Add files for issue #{issue_number} - Copilot agent demo v3"
        subprocess.run(["git", "commit", "-m", commit_message], check=True, capture_output=True)
        print("✅ Created git commit")
        
        # Push to GitHub
        subprocess.run(["git", "push", "-u", "origin", branch_name], check=True, capture_output=True)
        print("✅ Pushed branch to GitHub")
        
        print(f"\n🎉 Files created and committed successfully!")
        print(f"🌿 Branch: {branch_name}")
        print(f"🔗 Check your repository: https://github.com/{repo_owner}/{repo_name}")
        print(f"📁 View branch: https://github.com/{repo_owner}/{repo_name}/tree/{branch_name}")
        
        return branch_name
        
    except subprocess.CalledProcessError as e:
        print(f"❌ Git command failed: {e}")
        return None
    except Exception as e:
        print(f"❌ Error creating files: {e}")
        return None
    finally:
        os.chdir(original_cwd)


def create_pull_request(repo_owner, repo_name, github_token, branch_name, issue_number):
    """Create a real GitHub pull request using the GitHub API."""
    
    url = f"https://api.github.com/repos/{repo_owner}/{repo_name}/pulls"
    
    headers = {
        "Authorization": f"token {github_token}",
        "Accept": "application/vnd.github.v3+json",
        "Content-Type": "application/json"
    }
    
    pr_title = f"🤖 Demo v3: Add files for issue #{issue_number}"
    pr_body = f"""## 🚀 Copilot Agent Demo v3

This pull request was **automatically created** by the Copilot agent demo script.

### What's included:
- ✅ `README.md` - Project documentation
- ✅ `example.py` - Example Python script  
- ✅ `demo_config.json` - Demo configuration

### Related Issue
Closes #{issue_number}

### Features Demonstrated
1. ✅ **Issue Creation** - Real GitHub issue created via API
2. ✅ **File Creation** - Real files created and committed
3. ✅ **Git Operations** - Real branch, commit, and push
4. ✅ **Pull Request** - This real PR created via API

### Next Steps
- Review the files
- Merge if everything looks good
- See the complete Copilot agent workflow in action!

---
*This PR was automatically generated by simple_demo_v3.py*
"""
    
    pr_data = {
        "title": pr_title,
        "body": pr_body,
        "head": branch_name,
        "base": "main",
        "draft": False
    }
    
    print(f"\n🔄 Step 3: Creating real pull request...")
    print(f"📝 Title: {pr_title}")
    print(f"🌿 From branch: {branch_name}")
    print(f"🎯 To branch: main")
    
    try:
        response = requests.post(url, headers=headers, json=pr_data)
        
        if response.status_code == 201:
            pr = response.json()
            print(f"✅ SUCCESS! Pull Request #{pr['number']} created!")
            print(f"🔗 URL: {pr['html_url']}")
            return pr
        else:
            print(f"❌ Failed to create pull request: {response.status_code}")
            print(f"Response: {response.text}")
            return None
            
    except Exception as e:
        print(f"❌ Error creating pull request: {e}")
        return None


def main():
    """Main function - creates issue, real files, and pull request."""
    
    # Load environment variables from .env file if it exists
    load_env_file()
    
    # Configuration
    repo_owner = "terrytaylorbonn"
    repo_name = "416bbb_copilot_coding_agent"
    
    # Get GitHub token from environment variable
    github_token = os.getenv('GITHUB_TOKEN')
    
    if not github_token:
        print("❌ Error: GitHub token not found!")
        print("Please set the GITHUB_TOKEN environment variable:")
        print("  Windows: set GITHUB_TOKEN=your_token_here")
        print("  Linux/Mac: export GITHUB_TOKEN=your_token_here")
        print("  Or create a .env file with: GITHUB_TOKEN=your_token_here")
        return 1
    
    print("🎯 Simple GitHub Demo v3 - Real Actions Only")
    print("="*60)
    
    # Step 1: Create issue
    title = f"Demo v3 - Full workflow on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
    description = """## 🤖 Demo v3 - Complete Copilot Agent Workflow

This issue was created by simple_demo_v3.py which will demonstrate the **complete** Copilot agent workflow:

### Workflow Steps:
1. ✅ Create this GitHub issue
2. ✅ Create real files (README.md, example.py, demo_config.json)
3. ✅ Make real git commits
4. ✅ Push real branch to GitHub
5. ✅ Create real pull request

### Files to be created:
- `README.md` - Project documentation
- `example.py` - Example Python script
- `demo_config.json` - Demo configuration

### Expected result:
- New branch with real files
- Real commits in git history
- Files visible on GitHub
- **Real pull request linking to this issue**

This demonstrates a **complete end-to-end Copilot agent workflow**!

---
*This is a REAL demo, not a simulation.*
"""
    
    issue = create_github_issue(repo_owner, repo_name, github_token, title, description)
    
    if not issue:
        print("❌ Failed to create issue. Stopping.")
        return 1
    
    # Step 2: Create real files
    branch_name = create_real_files_and_commit(repo_owner, repo_name, github_token, issue['number'])
    
    if not branch_name:
        print("\n❌ Demo v3 failed during file creation!")
        return 1
    
    # Step 3: Create pull request
    pr = create_pull_request(repo_owner, repo_name, github_token, branch_name, issue['number'])
    
    if pr:
        print(f"\n🎉 Demo v3 completed successfully!")
        print(f"✅ Issue #{issue['number']}: {issue['html_url']}")
        print(f"✅ Branch created: {branch_name}")
        print(f"✅ Pull Request #{pr['number']}: {pr['html_url']}")
        print(f"\n📋 Complete workflow demonstrated:")
        print(f"   Issue → Files → Commits → Branch → Pull Request")
        print(f"\n🎯 Next: Review the PR and merge if everything looks good!")
    else:
        print("\n❌ Demo v3 failed during pull request creation!")
        print(f"✅ But issue and files were created successfully:")
        print(f"   Issue #{issue['number']}: {issue['html_url']}")
        print(f"   Branch: {branch_name}")
        return 1
    
    return 0


if __name__ == "__main__":
    exit(main())
